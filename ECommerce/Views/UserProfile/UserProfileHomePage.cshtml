@using Entity.EntityClass
@model UserProfileModel 

@section Styles{
    <link rel="stylesheet" href="~/css/UserProfileHome.css"/>
}
<div class="_container_">
    @{
        string profileImgpath = Model.userProfile.ProfileImgPath == null ? Utility.SD.AnonimUserProfileImgPath : Model.userProfile.ProfileImgPath.Replace('\\', '/').Substring(1);
    }
    <div class="item user-data">
        <img class="user-profile-img" src="@profileImgpath">
        <div class="data-row">
            UserName : @Model.userProfile.AppUser.UserName
        </div>
        <div class="data-row">
            FirstName : @Model.userProfile.AppUser.FirstName
        </div>
        <div class="data-row">
            LastName : @Model.userProfile.AppUser.LastName
        </div>
        <div class="data-row">
            Email : @Model.userProfile.AppUser.Email
        </div>
    </div>
    <div class="item">
        <form method="post" asp-action="EditProfilePhoto" enctype="multipart/form-data">
            <input value="@Model.userProfile.Id" name="userProfileId" hidden />
            <label for="images" class="drop-container" id="dropcontainer">

                <span class="drop-title">
                    <h3>Edit Profile Image</h3>
                    Drop files here
                </span>
                or
                <input type="file" id="images" accept="image/png, image/jpg, image/jpeg" required name="file">
                <button class="btn btn-success" type="submit">Submit</button>
            </label>
        </form>

    </div>
    <div class="item">
        <h3 class="message-header" style="text-align:center;">Previous Messages</h3>
        @foreach(Entity.EntityClass.Comment comment in Model.comments)
        {

                <div class="user-comments">
                    @comment.Message
                <form method="post" asp-action="DeleteChatMessage">
                    <input type="hidden" name="chatId" value="@comment.Id" />
                    <button type="submit" class="delte-button btn btn-danger">
                        <i class="fa-solid fa-trash"></i>
                    </button>
                </form>
                </div>

        }
    </div>
    <div class="item">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">OrderId</th>
                    <th scope="col">Price</th>
                    <th scope="col">Status</th>
                </tr>
            </thead>
            <tbody>

                @foreach (Order order in Model.orders )
                {
                    <tr>
                        <th scope="row">@order.Id</th>
                        <td>

                            @{
                                double total_price = 0;
                                foreach (var orderDetail in order.OrderDetails)
                                {
                                    total_price += orderDetail.TotalPrice;
                                }
                            }
                            @total_price;
                        </td>

                        <td>@order.OrderStatus</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="item">
        <h4 style="text-align:center">
            Refound book
        </h4>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">OrderId</th>
                    <th scope="col">Price</th>
                    <th scope="col">Status</th>
                    <th scope="col">Refound</th>
                </tr>
            </thead>
            <tbody>

                @foreach (Order order in Model.orders)
                {
                    if (!(order.OrderStatus == Entity.Enum.OrderStatus.Pending ||
                    order.OrderStatus == Entity.Enum.OrderStatus.Approved
                    )) continue; // only approved and pending entityes can refound
                    <tr>
                        <th scope="row">@order.Id</th>
                        <td>

                            @{
                                double total_price = 0;
                                foreach (var orderDetail in order.OrderDetails)
                                {
                                    total_price += orderDetail.TotalPrice;
                                }
                            }
                            @total_price;
                        </td>

                        <td>@order.OrderStatus</td>
                        <td>
                            <form asp-action="Refound" asp-controller="Purchase" method="post">
                                <input type="hidden" name="OrderId" value="@order.Id" />
                                <button class="btn btn-danger" type="submit">Refound</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="item">
        <h4 style="text-align:center">
            Start Live chat with employee
        </h4>
        <button class="btn btn-warning" style="display:block; margin:auto;">Start</button>
    </div>
    <div class="item">
        <h3 style="text-align:center;">Wallet Credit:</h3>
        <br />
        <div style="text-align:center;font-size:20px;font-weight:bolder;">@Model.userProfile.Wallet Creadit</div>
    </div>
</div>


@* signal r scripts  *@
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.9/signalr.min.js"></script>
<script>

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();

    // Handle received messages
    connection.on("ReceiveMessage", (message) => {
        console.log("Received message:", message);
        // Handle the message as needed
    });

    // Start the connection
    connection.start()
        .then(() => {
            // Connection established
            console.log("Connected to the hub");

            // Example: Send a private message to another user after the connection is established
            sendPrivateMessage(userId, "Hello, World!");
        })
        .catch(err => console.error("Error starting connection:", err));

    // Function to send a private message to another user
    function sendPrivateMessage(userId, message) {
        if (connection.state === signalR.HubConnectionState.Connected) {
            connection.invoke("SendPrivateMessage", userId, message)
                .catch(err => console.error("Error sending message:", err));
        } else {
            console.warn("Connection is not in the 'Connected' state. Message not sent.");
        }
    }
    sendPrivateMessage("99d3d881-e6b3-4750-b863-2ab48721e217" , "test message from admin to cutomer")
</script>